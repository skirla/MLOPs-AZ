name: Deploy Azure ML Infrastructure

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch
    paths:
      - 'terraform/**' # Only trigger if files in the terraform directory change
  workflow_dispatch: # Allow manual triggering

# Required permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

# Set default working directory for all steps
defaults:
  run:
    working-directory: ./terraform

jobs:
  terraform:
    name: Terraform Apply ML Infra
    runs-on: ubuntu-latest
    environment: production # Optional: Link to a GitHub Environment for protection rules/secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Check Secrets Availability # <-- TEMPORARY DEBUG STEP
        run: |
          echo "AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID != '' && 'OK' || 'EMPTY or MISSING' }}"
          echo "AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID != '' && 'OK' || 'EMPTY or MISSING' }}"
          echo "AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID != '' && 'OK' || 'EMPTY or MISSING' }}"

      - name: Azure Login using OIDC
        id: login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false # Optional: Set to true if you need PowerShell commands
      
      - name: Verify Login Step Outcome
        run: |
             echo "Login step outcome: ${{ steps.login.outcome }}"
    
      - name: Check Environment Variables after Azure Login # <-- ADD THIS STEP
        run: |
           echo "Checking ARM environment variables..."
           env | grep ARM_
           echo "ARM_USE_OIDC should be true: $ARM_USE_OIDC"
           echo "ARM_OIDC_TOKEN should exist (checking length): ${#ARM_OIDC_TOKEN}"
        shell: bash # Ensure bash is used for ${#VAR} syntax

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.5" # Specify desired Terraform version
          # terraform_wrapper: true # Enable if using TF_VAR_... env vars heavily

      - name: Terraform Init
        id: init
        env:
          # Pass backend config variables securely as environment variables
          # Terraform automatically picks these up for 'azurerm' backend init
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: "true" # Ensure backend init also uses OIDC
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -input=false # Don't prompt for input

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan # Save plan for apply step
        # continue-on-error: true # Set to true if you want 'apply' to run even if plan shows no changes

      # Optional: Add a step here for manual approval if desired,
      # potentially using GitHub Environments with approvers.

      - name: Terraform Apply
        id: apply
        # Only run apply if the push is to the main branch (safety check)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false tfplan
        # Use 'tfplan' file ensures only the planned changes are applied